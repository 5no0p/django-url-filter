# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function, unicode_literals
from itertools import chain

import coreapi

from .drf import URLFilterBackend


class CoreAPIURLFilterBackend(URLFilterBackend):
    """
    Same as :py:class:`url_filter.integrations.drf.DjangoFilterBackend` except
    this backend also implements coreapi interface for autogenerated API docs.
    """

    def get_schema_fields(self, view):
        """
        Get coreapi filter definitions

        Returns all filters including their supported lookups.
        """
        queryset = view.get_queryset()
        filter_class = self.get_filter_class(view, queryset)

        return (
            []
            if not filter_class
            else list(chain(*[
                [coreapi.Field(name=name, required=False, location="query", schema=None)] +
                ([
                    coreapi.Field(name=name + "__" + l, required=False, location="query", schema=None)
                    for l in field.lookups
                ] if not field.no_lookup else [])
                for name, field in filter_class(data={}, queryset=queryset).filters.items()
            ]))
        )
